#!/bin/bash
dev_branch='development'
remote='origin'
release_prefix='release-'
release_sufix=''

sub_stage(){
  if [ -z $1 ]; then 
    echo "Error: you must give a release number" >&2
    exit 1
  fi
  git checkout -b $release_prefix$1$release_sufix $dev_branch
}

sub_release(){
  if [ -z $1 ]; then
    branch=`git rev-parse --abbrev-ref HEAD`
  else
    branch=$1
  fi
  if [[ $branch != $release_prefix*$release_sufix ]];then
    echo "Error: you are not on a release branch."
    echo "please give a release branch name or checkout a release branch"
    exit 1
  fi
  echo "doing a get pull"
  git pull $remote $dev_branch
  if [ $? -ne 0 ]; then
    exit 1 
  fi
  echo "checking out devbranch"
  git checkout $dev_branch
  if [ $? -ne 0 ]; then
    exit 1 
  fi
  echo "merging release into devbranch"
  git merge $branch --no-ff 
  if [ $? -ne 0 ]; then
    exit 1 
  fi
  echo "pushing devbranch to the server"
  git push $remote $dev_branch
  if [ $? -ne 0 ]; then
    git checkout $branch
    exit 1 
  fi
  echo delete old branch
  git branch -d $branch
  if [ $? -ne 0 ]; then
    exit 1 
  fi
}

sub_help(){
  echo "Usage: git release <subcomand>"
  echo ""
  echo "-h --help        display this help message"
  echo ""
  echo "Commands:"
  echo ""
  echo "start <name>     starts a new release with <name>"
  echo ""
  echo "finish [name]    finish merger and push a release."
  echo "                 If name not given will use current branch"
  echo ""
}

subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_${subcommand} $@
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo " Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac
